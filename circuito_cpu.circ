<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.4.1" version="1.0">
  This file is intended to be loaded by Logisim-evolution (https://github.com/reds-heig/logisim-evolution).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="NewPins"/>
    </tool>
    <tool name="Probe">
      <a name="appearance" val="NewPins"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1">
    <tool name="PLA">
      <a name="table" val=""/>
    </tool>
  </lib>
  <lib desc="#Plexers" name="2">
    <tool name="Multiplexer">
      <a name="enable" val="false"/>
    </tool>
    <tool name="Demultiplexer">
      <a name="enable" val="false"/>
    </tool>
  </lib>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4">
    <tool name="D Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="T Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="J-K Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="S-R Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Counter">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Shift Register">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Random">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="RAM">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="ROM">
      <a name="appearance" val="logisim_evolution"/>
      <a name="contents">addr/data: 8 8
0
</a>
    </tool>
  </lib>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7">
    <tool name="TclGeneric">
      <a name="content">library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
&#13;
entity TCL_Generic is&#13;
  port(&#13;
    --Insert input ports below&#13;
    horloge_i  : in  std_logic;                    -- input bit example&#13;
    val_i      : in  std_logic_vector(3 downto 0); -- input vector example&#13;
&#13;
	  --Insert output ports below&#13;
    max_o      : out std_logic;                    -- output bit example&#13;
    cpt_o      : out std_logic_Vector(3 downto 0)  -- output vector example&#13;
  );&#13;
end TCL_Generic;&#13;
</a>
    </tool>
  </lib>
  <lib desc="#Base" name="8">
    <tool name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
  </lib>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11">
    <tool name="Rv32im">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="Nios2">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocBus">
      <a name="SocBusIdentifier" val="0x00000189329F850D10f1f9ac"/>
    </tool>
    <tool name="Socmem">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocPio">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocVga">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocJtagUart">
      <a name="SocBusSelection" val=""/>
    </tool>
  </lib>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
    <sep/>
    <tool lib="0" name="Pin">
      <a name="appearance" val="NewPins"/>
    </tool>
    <tool lib="0" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool lib="4" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="circuitvhdlpath" val=""/>
    <a name="clabel" val=""/>
    <a name="clabelfont" val="SansSerif bold 16"/>
    <a name="clabelup" val="east"/>
    <comp lib="0" loc="(1270,1510)" name="Clock">
      <a name="label" val="clk_src"/>
    </comp>
    <comp lib="0" loc="(1360,1510)" name="Tunnel">
      <a name="label" val="clk"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(1390,1260)" name="Splitter">
      <a name="appear" val="right"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="0"/>
      <a name="bit13" val="0"/>
      <a name="bit14" val="0"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="0"/>
      <a name="bit21" val="0"/>
      <a name="bit22" val="0"/>
      <a name="bit23" val="0"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit5" val="0"/>
      <a name="bit6" val="0"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="32"/>
      <a name="spacing" val="2"/>
    </comp>
    <comp lib="0" loc="(1730,1200)" name="Tunnel">
      <a name="facing" val="south"/>
      <a name="label" val="clk"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2000,1330)" name="Tunnel">
      <a name="facing" val="north"/>
      <a name="label" val="IF_ID_pc"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(2060,1440)" name="Splitter">
      <a name="bit0" val="none"/>
      <a name="bit1" val="none"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="none"/>
      <a name="bit20" val="1"/>
      <a name="bit21" val="1"/>
      <a name="bit22" val="1"/>
      <a name="bit23" val="1"/>
      <a name="bit24" val="1"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="none"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit4" val="none"/>
      <a name="bit5" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="incoming" val="32"/>
      <a name="spacing" val="2"/>
    </comp>
    <comp lib="0" loc="(2130,1230)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="clk"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2430,1090)" name="Tunnel">
      <a name="label" val="alu_src"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2430,1120)" name="Tunnel">
      <a name="label" val="ID_EX_pc_reg_br"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2430,920)" name="Tunnel">
      <a name="label" val="pc_reg_alu"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2430,950)" name="Tunnel">
      <a name="label" val="alu_op"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(2440,1030)" name="Tunnel">
      <a name="label" val="mem_w"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2440,1060)" name="Tunnel">
      <a name="label" val="mem_reg"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2480,1000)" name="Tunnel">
      <a name="label" val="mem_r"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2480,1400)" name="Tunnel">
      <a name="facing" val="north"/>
      <a name="label" val="ID_EX_pc_reg_br"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2490,970)" name="Tunnel">
      <a name="label" val="ID_EX_br_in"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2500,1280)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="alu_src"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2500,1310)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="alu_op"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(2500,1350)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="mem_r"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2560,1160)" name="Tunnel">
      <a name="facing" val="south"/>
      <a name="label" val="IF_ID_pc"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(2610,1140)" name="Tunnel">
      <a name="facing" val="south"/>
      <a name="label" val="clk"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2610,1270)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="pc_reg_alu"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2610,1330)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="mem_w"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2610,1370)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ID_EX_br_in"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2610,1410)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="mem_reg"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(2950,1890)" name="Tunnel">
      <a name="facing" val="south"/>
      <a name="label" val="MEM_WB_result"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(2970,1630)" name="Splitter">
      <a name="bit0" val="none"/>
      <a name="bit1" val="none"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="none"/>
      <a name="bit20" val="1"/>
      <a name="bit21" val="1"/>
      <a name="bit22" val="1"/>
      <a name="bit23" val="1"/>
      <a name="bit24" val="1"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="none"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit4" val="none"/>
      <a name="bit5" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="facing" val="south"/>
      <a name="incoming" val="32"/>
    </comp>
    <comp lib="0" loc="(3030,1210)" name="Tunnel">
      <a name="label" val="ID_EX_reg_b"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3030,1240)" name="Tunnel">
      <a name="label" val="ID_EX_imm"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3030,990)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="MEM_WB_result"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3040,1170)" name="Tunnel">
      <a name="label" val="ID_EX_pc"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3080,1020)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="EX_MEM_alu_result"/>
      <a name="labelfont" val="SansSerif bold 12"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3080,960)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ID_EX_reg_a"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3110,1310)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="MEM_WB_result"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3120,1030)" name="Ground">
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3120,1190)" name="Tunnel">
      <a name="label" val="ID_EX_reg_a"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3120,1340)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="EX_MEM_alu_result"/>
      <a name="labelfont" val="SansSerif bold 12"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3130,1280)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ID_EX_reg_b"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3130,1360)" name="Ground">
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3170,1040)" name="Tunnel">
      <a name="label" val="fwd_a"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(3200,1080)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ID_EX_pc"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3200,1370)" name="Tunnel">
      <a name="label" val="fwd_b"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(3250,1410)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ID_EX_imm"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3390,1230)" name="Splitter">
      <a name="bit0" val="none"/>
      <a name="bit1" val="none"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="none"/>
      <a name="bit16" val="none"/>
      <a name="bit17" val="none"/>
      <a name="bit18" val="none"/>
      <a name="bit19" val="none"/>
      <a name="bit2" val="none"/>
      <a name="bit20" val="none"/>
      <a name="bit21" val="none"/>
      <a name="bit22" val="none"/>
      <a name="bit23" val="none"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="none"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit4" val="none"/>
      <a name="bit5" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="32"/>
    </comp>
    <comp lib="0" loc="(3550,1240)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ID_EX_pc"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3670,1170)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ID_EX_reg_b"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3680,1070)" name="Tunnel">
      <a name="facing" val="south"/>
      <a name="label" val="clk"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(3700,1660)" name="Tunnel">
      <a name="label" val="fwd_a"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(3700,1680)" name="Tunnel">
      <a name="label" val="fwd_b"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(3710,1200)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ID_EX_imm"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(3740,1140)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ID_EX_reg_a"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(4080,1370)" name="Tunnel">
      <a name="facing" val="north"/>
      <a name="label" val="EX_MEM_alu_result"/>
      <a name="labelfont" val="SansSerif bold 12"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(4090,1170)" name="Tunnel">
      <a name="label" val="alu_br"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(4090,1270)" name="Tunnel">
      <a name="label" val="br"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(4090,1300)" name="Tunnel">
      <a name="label" val="pc_reg_br"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(4100,950)" name="Splitter">
      <a name="bit1" val="0"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="0"/>
      <a name="bit13" val="0"/>
      <a name="bit14" val="0"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="0"/>
      <a name="bit21" val="0"/>
      <a name="bit22" val="0"/>
      <a name="bit23" val="0"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit5" val="0"/>
      <a name="bit6" val="0"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="32"/>
    </comp>
    <comp lib="0" loc="(4160,1010)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="clk"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(4620,970)" name="Tunnel">
      <a name="facing" val="south"/>
      <a name="label" val="clk"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(860,1280)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="alu_br"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(860,1320)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="br"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(970,1260)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="clk"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="0" loc="(970,1340)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="pc_reg_br"/>
      <a name="labelfont" val="SansSerif bold 13"/>
    </comp>
    <comp lib="1" loc="(970,1300)" name="AND Gate">
      <a name="label" val="branch_en"/>
      <a name="labelfont" val="SansSerif bold 12"/>
      <a name="size" val="30"/>
    </comp>
    <comp lib="2" loc="(3180,1000)" name="Multiplexer">
      <a name="enable" val="false"/>
      <a name="select" val="2"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="2" loc="(3210,1320)" name="Multiplexer">
      <a name="enable" val="false"/>
      <a name="select" val="2"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="2" loc="(3300,1070)" name="Multiplexer">
      <a name="enable" val="false"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="2" loc="(3300,1370)" name="Multiplexer">
      <a name="enable" val="false"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="2" loc="(4940,990)" name="Multiplexer">
      <a name="enable" val="false"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="4" loc="(1430,1260)" name="ROM">
      <a name="addrWidth" val="24"/>
      <a name="appearance" val="logisim_evolution"/>
      <a name="contents">addr/data: 24 32
f1000293 502023 2d00313 632623 c32283 fe000be3
</a>
      <a name="dataWidth" val="32"/>
      <a name="label" val="program_mem"/>
      <a name="labelfont" val="SansSerif bold 13"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp lib="4" loc="(4210,930)" name="RAM">
      <a name="addrWidth" val="24"/>
      <a name="appearance" val="logisim_evolution"/>
      <a name="dataWidth" val="32"/>
      <a name="databus" val="bidir"/>
      <a name="enables" val="line"/>
      <a name="label" val="data_mem"/>
      <a name="labelvisible" val="true"/>
      <a name="trigger" val="falling"/>
    </comp>
    <comp loc="(1270,1260)" name="prog_count">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1980,1240)" name="IF_ID">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="IF_ID_reg"/>
    </comp>
    <comp loc="(2370,940)" name="ctrl_unit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="subctrlsys"/>
    </comp>
    <comp loc="(2380,1230)" name="reg_file">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="register_file"/>
    </comp>
    <comp loc="(2390,1470)" name="imm_gen">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="immediate_gen"/>
    </comp>
    <comp loc="(2850,1150)" name="ID_EX">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ID_EX_reg"/>
    </comp>
    <comp loc="(3240,1460)" name="alu_ctrl">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="alu_ctrl_sys"/>
    </comp>
    <comp loc="(3560,1100)" name="alu">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="alu_block"/>
    </comp>
    <comp loc="(3670,1660)" name="fwd_unit">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="forwarding_unit"/>
    </comp>
    <comp loc="(3970,1090)" name="EX_MEM">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="EX_MEM_reg"/>
    </comp>
    <comp loc="(4860,980)" name="MEM_WB">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="MEM_WB_reg"/>
    </comp>
    <wire from="(1010,1360)" to="(1050,1360)"/>
    <wire from="(1010,840)" to="(1010,1360)"/>
    <wire from="(1010,840)" to="(4000,840)"/>
    <wire from="(1020,1340)" to="(1050,1340)"/>
    <wire from="(1020,860)" to="(1020,1340)"/>
    <wire from="(1020,860)" to="(3990,860)"/>
    <wire from="(1030,1210)" to="(1030,1280)"/>
    <wire from="(1030,1210)" to="(1430,1210)"/>
    <wire from="(1030,1280)" to="(1050,1280)"/>
    <wire from="(1270,1260)" to="(1330,1260)"/>
    <wire from="(1270,1510)" to="(1360,1510)"/>
    <wire from="(1330,1230)" to="(1330,1260)"/>
    <wire from="(1330,1230)" to="(1700,1230)"/>
    <wire from="(1330,1260)" to="(1390,1260)"/>
    <wire from="(1410,1270)" to="(1430,1270)"/>
    <wire from="(1430,880)" to="(1430,1210)"/>
    <wire from="(1430,880)" to="(3980,880)"/>
    <wire from="(1670,1320)" to="(1680,1320)"/>
    <wire from="(1680,1260)" to="(1680,1320)"/>
    <wire from="(1680,1260)" to="(1760,1260)"/>
    <wire from="(1700,1230)" to="(1700,1280)"/>
    <wire from="(1700,1280)" to="(1760,1280)"/>
    <wire from="(1730,1200)" to="(1730,1240)"/>
    <wire from="(1730,1240)" to="(1760,1240)"/>
    <wire from="(1980,1240)" to="(2050,1240)"/>
    <wire from="(1980,1260)" to="(2000,1260)"/>
    <wire from="(2000,1260)" to="(2000,1330)"/>
    <wire from="(2050,1170)" to="(2050,1240)"/>
    <wire from="(2050,1170)" to="(2630,1170)"/>
    <wire from="(2050,1240)" to="(2050,1440)"/>
    <wire from="(2050,1440)" to="(2050,1470)"/>
    <wire from="(2050,1440)" to="(2060,1440)"/>
    <wire from="(2050,1470)" to="(2170,1470)"/>
    <wire from="(2050,940)" to="(2050,1170)"/>
    <wire from="(2050,940)" to="(2150,940)"/>
    <wire from="(2080,1410)" to="(2100,1410)"/>
    <wire from="(2080,1430)" to="(2110,1430)"/>
    <wire from="(2100,1310)" to="(2100,1410)"/>
    <wire from="(2100,1310)" to="(2160,1310)"/>
    <wire from="(2110,1330)" to="(2110,1430)"/>
    <wire from="(2110,1330)" to="(2160,1330)"/>
    <wire from="(2130,1230)" to="(2160,1230)"/>
    <wire from="(2130,1250)" to="(2130,1940)"/>
    <wire from="(2130,1250)" to="(2160,1250)"/>
    <wire from="(2130,1940)" to="(3420,1940)"/>
    <wire from="(2140,1270)" to="(2140,1930)"/>
    <wire from="(2140,1270)" to="(2160,1270)"/>
    <wire from="(2140,1930)" to="(2950,1930)"/>
    <wire from="(2150,1290)" to="(2150,1920)"/>
    <wire from="(2150,1290)" to="(2160,1290)"/>
    <wire from="(2150,1920)" to="(3400,1920)"/>
    <wire from="(2370,1000)" to="(2480,1000)"/>
    <wire from="(2370,1020)" to="(2410,1020)"/>
    <wire from="(2370,1040)" to="(2410,1040)"/>
    <wire from="(2370,1060)" to="(2400,1060)"/>
    <wire from="(2370,1080)" to="(2420,1080)"/>
    <wire from="(2370,1100)" to="(2400,1100)"/>
    <wire from="(2370,940)" to="(2400,940)"/>
    <wire from="(2370,960)" to="(2400,960)"/>
    <wire from="(2370,980)" to="(2480,980)"/>
    <wire from="(2380,1230)" to="(2390,1230)"/>
    <wire from="(2380,1250)" to="(2400,1250)"/>
    <wire from="(2390,1210)" to="(2390,1230)"/>
    <wire from="(2390,1210)" to="(2630,1210)"/>
    <wire from="(2390,1470)" to="(2410,1470)"/>
    <wire from="(2400,1060)" to="(2400,1090)"/>
    <wire from="(2400,1090)" to="(2430,1090)"/>
    <wire from="(2400,1100)" to="(2400,1120)"/>
    <wire from="(2400,1120)" to="(2430,1120)"/>
    <wire from="(2400,1230)" to="(2400,1250)"/>
    <wire from="(2400,1230)" to="(2630,1230)"/>
    <wire from="(2400,920)" to="(2400,940)"/>
    <wire from="(2400,920)" to="(2430,920)"/>
    <wire from="(2400,950)" to="(2400,960)"/>
    <wire from="(2400,950)" to="(2430,950)"/>
    <wire from="(2410,1020)" to="(2410,1030)"/>
    <wire from="(2410,1030)" to="(2440,1030)"/>
    <wire from="(2410,1040)" to="(2410,1060)"/>
    <wire from="(2410,1060)" to="(2440,1060)"/>
    <wire from="(2410,1250)" to="(2410,1470)"/>
    <wire from="(2410,1250)" to="(2630,1250)"/>
    <wire from="(2420,1080)" to="(2420,1450)"/>
    <wire from="(2420,1450)" to="(2600,1450)"/>
    <wire from="(2480,1390)" to="(2480,1400)"/>
    <wire from="(2480,1390)" to="(2630,1390)"/>
    <wire from="(2480,970)" to="(2480,980)"/>
    <wire from="(2480,970)" to="(2490,970)"/>
    <wire from="(2500,1280)" to="(2510,1280)"/>
    <wire from="(2500,1310)" to="(2630,1310)"/>
    <wire from="(2500,1350)" to="(2630,1350)"/>
    <wire from="(2510,1280)" to="(2510,1290)"/>
    <wire from="(2510,1290)" to="(2630,1290)"/>
    <wire from="(2560,1160)" to="(2560,1190)"/>
    <wire from="(2560,1190)" to="(2630,1190)"/>
    <wire from="(2600,1430)" to="(2600,1450)"/>
    <wire from="(2600,1430)" to="(2630,1430)"/>
    <wire from="(2610,1140)" to="(2610,1150)"/>
    <wire from="(2610,1150)" to="(2630,1150)"/>
    <wire from="(2610,1270)" to="(2630,1270)"/>
    <wire from="(2610,1330)" to="(2630,1330)"/>
    <wire from="(2610,1370)" to="(2630,1370)"/>
    <wire from="(2610,1410)" to="(2630,1410)"/>
    <wire from="(2850,1150)" to="(2970,1150)"/>
    <wire from="(2850,1170)" to="(3040,1170)"/>
    <wire from="(2850,1190)" to="(3120,1190)"/>
    <wire from="(2850,1210)" to="(3030,1210)"/>
    <wire from="(2850,1230)" to="(3020,1230)"/>
    <wire from="(2850,1250)" to="(2990,1250)"/>
    <wire from="(2850,1270)" to="(2990,1270)"/>
    <wire from="(2850,1290)" to="(2980,1290)"/>
    <wire from="(2850,1310)" to="(2860,1310)"/>
    <wire from="(2850,1330)" to="(2870,1330)"/>
    <wire from="(2850,1350)" to="(2880,1350)"/>
    <wire from="(2850,1370)" to="(2890,1370)"/>
    <wire from="(2850,1390)" to="(2900,1390)"/>
    <wire from="(2850,1410)" to="(2910,1410)"/>
    <wire from="(2860,1310)" to="(2860,1550)"/>
    <wire from="(2860,1550)" to="(3590,1550)"/>
    <wire from="(2870,1330)" to="(2870,1560)"/>
    <wire from="(2870,1560)" to="(3600,1560)"/>
    <wire from="(2880,1350)" to="(2880,1570)"/>
    <wire from="(2880,1570)" to="(3610,1570)"/>
    <wire from="(2890,1370)" to="(2890,1580)"/>
    <wire from="(2890,1580)" to="(3620,1580)"/>
    <wire from="(2900,1390)" to="(2900,1590)"/>
    <wire from="(2900,1590)" to="(3630,1590)"/>
    <wire from="(2910,1410)" to="(2910,1600)"/>
    <wire from="(2910,1600)" to="(3640,1600)"/>
    <wire from="(2950,1890)" to="(2950,1930)"/>
    <wire from="(2950,1930)" to="(4980,1930)"/>
    <wire from="(2970,1150)" to="(2970,1480)"/>
    <wire from="(2970,1480)" to="(2970,1530)"/>
    <wire from="(2970,1480)" to="(3020,1480)"/>
    <wire from="(2970,1530)" to="(2970,1630)"/>
    <wire from="(2970,1530)" to="(3350,1530)"/>
    <wire from="(2980,1290)" to="(2980,1460)"/>
    <wire from="(2980,1460)" to="(3020,1460)"/>
    <wire from="(2980,1650)" to="(2980,1680)"/>
    <wire from="(2980,1680)" to="(3450,1680)"/>
    <wire from="(2990,1100)" to="(2990,1250)"/>
    <wire from="(2990,1100)" to="(3280,1100)"/>
    <wire from="(2990,1270)" to="(2990,1430)"/>
    <wire from="(2990,1430)" to="(3280,1430)"/>
    <wire from="(2990,1650)" to="(2990,1660)"/>
    <wire from="(2990,1660)" to="(3450,1660)"/>
    <wire from="(3020,1230)" to="(3020,1240)"/>
    <wire from="(3020,1240)" to="(3030,1240)"/>
    <wire from="(3030,990)" to="(3140,990)"/>
    <wire from="(3080,1020)" to="(3090,1020)"/>
    <wire from="(3080,960)" to="(3120,960)"/>
    <wire from="(3090,1000)" to="(3090,1020)"/>
    <wire from="(3090,1000)" to="(3140,1000)"/>
    <wire from="(3110,1310)" to="(3170,1310)"/>
    <wire from="(3120,1010)" to="(3120,1030)"/>
    <wire from="(3120,1010)" to="(3140,1010)"/>
    <wire from="(3120,1320)" to="(3120,1340)"/>
    <wire from="(3120,1320)" to="(3170,1320)"/>
    <wire from="(3120,960)" to="(3120,980)"/>
    <wire from="(3120,980)" to="(3140,980)"/>
    <wire from="(3130,1280)" to="(3150,1280)"/>
    <wire from="(3130,1330)" to="(3130,1360)"/>
    <wire from="(3130,1330)" to="(3170,1330)"/>
    <wire from="(3150,1280)" to="(3150,1300)"/>
    <wire from="(3150,1300)" to="(3170,1300)"/>
    <wire from="(3160,1020)" to="(3160,1040)"/>
    <wire from="(3160,1040)" to="(3170,1040)"/>
    <wire from="(3180,1000)" to="(3230,1000)"/>
    <wire from="(3190,1340)" to="(3190,1370)"/>
    <wire from="(3190,1370)" to="(3200,1370)"/>
    <wire from="(3200,1080)" to="(3270,1080)"/>
    <wire from="(3210,1320)" to="(3260,1320)"/>
    <wire from="(3230,1000)" to="(3230,1060)"/>
    <wire from="(3230,1060)" to="(3270,1060)"/>
    <wire from="(3240,1460)" to="(3330,1460)"/>
    <wire from="(3250,1410)" to="(3260,1410)"/>
    <wire from="(3260,1320)" to="(3260,1360)"/>
    <wire from="(3260,1360)" to="(3270,1360)"/>
    <wire from="(3260,1380)" to="(3260,1410)"/>
    <wire from="(3260,1380)" to="(3270,1380)"/>
    <wire from="(3280,1090)" to="(3280,1100)"/>
    <wire from="(3280,1390)" to="(3280,1430)"/>
    <wire from="(3300,1070)" to="(3310,1070)"/>
    <wire from="(3300,1370)" to="(3310,1370)"/>
    <wire from="(3310,1070)" to="(3310,1100)"/>
    <wire from="(3310,1100)" to="(3340,1100)"/>
    <wire from="(3310,1120)" to="(3310,1370)"/>
    <wire from="(3310,1120)" to="(3340,1120)"/>
    <wire from="(3330,1140)" to="(3330,1460)"/>
    <wire from="(3330,1140)" to="(3340,1140)"/>
    <wire from="(3350,1230)" to="(3350,1530)"/>
    <wire from="(3350,1230)" to="(3390,1230)"/>
    <wire from="(3400,1720)" to="(3400,1920)"/>
    <wire from="(3400,1720)" to="(3450,1720)"/>
    <wire from="(3400,1920)" to="(4990,1920)"/>
    <wire from="(3410,1220)" to="(3420,1220)"/>
    <wire from="(3410,1760)" to="(3410,1820)"/>
    <wire from="(3410,1760)" to="(3450,1760)"/>
    <wire from="(3410,1820)" to="(3700,1820)"/>
    <wire from="(3420,1220)" to="(3420,1700)"/>
    <wire from="(3420,1220)" to="(3730,1220)"/>
    <wire from="(3420,1700)" to="(3450,1700)"/>
    <wire from="(3420,1780)" to="(3420,1940)"/>
    <wire from="(3420,1780)" to="(3450,1780)"/>
    <wire from="(3420,1940)" to="(5000,1940)"/>
    <wire from="(3430,1740)" to="(3430,1870)"/>
    <wire from="(3430,1740)" to="(3450,1740)"/>
    <wire from="(3430,1870)" to="(3990,1870)"/>
    <wire from="(3550,1240)" to="(3730,1240)"/>
    <wire from="(3560,1100)" to="(3750,1100)"/>
    <wire from="(3560,1120)" to="(3750,1120)"/>
    <wire from="(3590,1250)" to="(3590,1550)"/>
    <wire from="(3590,1250)" to="(3750,1250)"/>
    <wire from="(3600,1270)" to="(3600,1560)"/>
    <wire from="(3600,1270)" to="(3750,1270)"/>
    <wire from="(3610,1290)" to="(3610,1570)"/>
    <wire from="(3610,1290)" to="(3750,1290)"/>
    <wire from="(3620,1310)" to="(3620,1580)"/>
    <wire from="(3620,1310)" to="(3750,1310)"/>
    <wire from="(3630,1330)" to="(3630,1590)"/>
    <wire from="(3630,1330)" to="(3750,1330)"/>
    <wire from="(3640,1350)" to="(3640,1600)"/>
    <wire from="(3640,1350)" to="(3750,1350)"/>
    <wire from="(3670,1170)" to="(3750,1170)"/>
    <wire from="(3670,1660)" to="(3700,1660)"/>
    <wire from="(3670,1680)" to="(3700,1680)"/>
    <wire from="(3680,1070)" to="(3680,1080)"/>
    <wire from="(3680,1080)" to="(3750,1080)"/>
    <wire from="(3700,1740)" to="(3700,1820)"/>
    <wire from="(3700,1740)" to="(4010,1740)"/>
    <wire from="(3710,1200)" to="(3730,1200)"/>
    <wire from="(3730,1190)" to="(3730,1200)"/>
    <wire from="(3730,1190)" to="(3750,1190)"/>
    <wire from="(3730,1210)" to="(3730,1220)"/>
    <wire from="(3730,1210)" to="(3750,1210)"/>
    <wire from="(3730,1230)" to="(3730,1240)"/>
    <wire from="(3730,1230)" to="(3750,1230)"/>
    <wire from="(3740,1140)" to="(3750,1140)"/>
    <wire from="(3750,1080)" to="(3750,1090)"/>
    <wire from="(3750,1100)" to="(3750,1110)"/>
    <wire from="(3750,1120)" to="(3750,1130)"/>
    <wire from="(3750,1140)" to="(3750,1150)"/>
    <wire from="(3970,1090)" to="(3980,1090)"/>
    <wire from="(3970,1110)" to="(3990,1110)"/>
    <wire from="(3970,1130)" to="(4190,1130)"/>
    <wire from="(3970,1150)" to="(4050,1150)"/>
    <wire from="(3970,1170)" to="(4090,1170)"/>
    <wire from="(3970,1190)" to="(3990,1190)"/>
    <wire from="(3970,1210)" to="(4000,1210)"/>
    <wire from="(3970,1230)" to="(4060,1230)"/>
    <wire from="(3970,1250)" to="(4070,1250)"/>
    <wire from="(3970,1270)" to="(4090,1270)"/>
    <wire from="(3970,1290)" to="(4060,1290)"/>
    <wire from="(3970,1310)" to="(4000,1310)"/>
    <wire from="(3970,1330)" to="(4010,1330)"/>
    <wire from="(3980,880)" to="(3980,1090)"/>
    <wire from="(3990,1190)" to="(3990,1720)"/>
    <wire from="(3990,1720)" to="(3990,1870)"/>
    <wire from="(3990,1720)" to="(4570,1720)"/>
    <wire from="(3990,860)" to="(3990,1110)"/>
    <wire from="(4000,1310)" to="(4000,1730)"/>
    <wire from="(4000,1730)" to="(4580,1730)"/>
    <wire from="(4000,840)" to="(4000,1210)"/>
    <wire from="(4010,1330)" to="(4010,1740)"/>
    <wire from="(4010,1740)" to="(4590,1740)"/>
    <wire from="(4050,1150)" to="(4050,1350)"/>
    <wire from="(4050,1350)" to="(4080,1350)"/>
    <wire from="(4050,890)" to="(4050,950)"/>
    <wire from="(4050,890)" to="(4490,890)"/>
    <wire from="(4050,950)" to="(4050,1150)"/>
    <wire from="(4050,950)" to="(4100,950)"/>
    <wire from="(4060,1290)" to="(4060,1300)"/>
    <wire from="(4060,1300)" to="(4090,1300)"/>
    <wire from="(4060,970)" to="(4060,1230)"/>
    <wire from="(4060,970)" to="(4170,970)"/>
    <wire from="(4070,990)" to="(4070,1250)"/>
    <wire from="(4070,990)" to="(4210,990)"/>
    <wire from="(4080,1350)" to="(4080,1370)"/>
    <wire from="(4120,940)" to="(4210,940)"/>
    <wire from="(4160,1010)" to="(4180,1010)"/>
    <wire from="(4170,970)" to="(4170,980)"/>
    <wire from="(4170,980)" to="(4210,980)"/>
    <wire from="(4180,1000)" to="(4180,1010)"/>
    <wire from="(4180,1000)" to="(4210,1000)"/>
    <wire from="(4190,1130)" to="(4190,1680)"/>
    <wire from="(4190,1680)" to="(4490,1680)"/>
    <wire from="(4460,1020)" to="(4490,1020)"/>
    <wire from="(4490,1000)" to="(4640,1000)"/>
    <wire from="(4490,1020)" to="(4490,1680)"/>
    <wire from="(4490,1020)" to="(4640,1020)"/>
    <wire from="(4490,890)" to="(4490,1000)"/>
    <wire from="(4570,1040)" to="(4570,1720)"/>
    <wire from="(4570,1040)" to="(4640,1040)"/>
    <wire from="(4580,1060)" to="(4580,1730)"/>
    <wire from="(4580,1060)" to="(4640,1060)"/>
    <wire from="(4590,1080)" to="(4590,1740)"/>
    <wire from="(4590,1080)" to="(4640,1080)"/>
    <wire from="(4620,970)" to="(4620,980)"/>
    <wire from="(4620,980)" to="(4640,980)"/>
    <wire from="(4860,1000)" to="(4910,1000)"/>
    <wire from="(4860,1020)" to="(4990,1020)"/>
    <wire from="(4860,1040)" to="(4920,1040)"/>
    <wire from="(4860,1060)" to="(5000,1060)"/>
    <wire from="(4860,980)" to="(4910,980)"/>
    <wire from="(4920,1010)" to="(4920,1040)"/>
    <wire from="(4940,990)" to="(4980,990)"/>
    <wire from="(4980,990)" to="(4980,1930)"/>
    <wire from="(4990,1020)" to="(4990,1920)"/>
    <wire from="(5000,1060)" to="(5000,1940)"/>
    <wire from="(860,1280)" to="(880,1280)"/>
    <wire from="(860,1320)" to="(880,1320)"/>
    <wire from="(880,1280)" to="(880,1290)"/>
    <wire from="(880,1290)" to="(940,1290)"/>
    <wire from="(880,1310)" to="(880,1320)"/>
    <wire from="(880,1310)" to="(940,1310)"/>
    <wire from="(970,1260)" to="(1050,1260)"/>
    <wire from="(970,1300)" to="(1050,1300)"/>
    <wire from="(970,1340)" to="(980,1340)"/>
    <wire from="(980,1320)" to="(1050,1320)"/>
    <wire from="(980,1320)" to="(980,1340)"/>
  </circuit>
  <vhdl name="prog_count">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity prog_count is
    port(
        clk : in std_logic;
        imm : in std_logic_vector(31 downto 0);
        branch : in std_logic;
        pc_reg_mux : in std_logic;
        reg_in : in std_logic_vector(31 downto 0);
        pc_in : in std_logic_vector(31 downto 0);
        pc : out std_logic_vector(31 downto 0)
    );
end prog_count;

architecture Behavioral of prog_count is
    signal immediate, ptr_pc : std_logic_vector(31 downto 0) := (others =&gt; '0');
    begin
        immediate &lt;= imm;
        pc &lt;= ptr_pc;

        fetch_instr: process(clk, branch, pc_reg_mux, pc_in) is
        begin
            if rising_edge(clk) then
                if branch = '1' then
                	if pc_reg_mux = '0' then
                    	ptr_pc &lt;= std_logic_vector(signed(pc_in) + signed(immediate));
                    else
                    	ptr_pc &lt;= std_logic_vector(signed(reg_in) + signed(immediate));
                    end if;
                else
                    ptr_pc &lt;= std_logic_vector(unsigned(ptr_pc) + x"00000001");
                end if;
            end if;
        end process fetch_instr;
end Behavioral;</vhdl>
  <vhdl name="reg_file">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity reg_file is
    port(
        clk : in std_logic;
        write_en : in std_logic;

        write_data : in std_logic_vector(31 downto 0);
        
        write_addr : in std_logic_vector(4 downto 0);
        reg_a_addr : in std_logic_vector(4 downto 0);
        reg_b_addr : in std_logic_vector(4 downto 0);

        reg_a_data : out std_logic_vector(31 downto 0);
        reg_b_data : out std_logic_vector(31 downto 0)
    );
end reg_file;

architecture Behavioral of reg_file is
    -- 32 registradores de 32 bits
    type register_mem is array (integer range &lt;&gt;) of std_logic_vector(31 downto 0);
    signal register_bank : register_mem(0 to 31) := (others =&gt; x"00000000");

    begin
        reg_a_data &lt;= register_bank(to_integer(unsigned(reg_a_addr)));
        reg_b_data &lt;= register_bank(to_integer(unsigned(reg_b_addr)));
        
        register_access: process(clk, write_en, write_addr) is
        begin
            -- na borda de subida
            if rising_edge(clk) and write_en = '1' then
            	if write_addr /= "00000" then
            		register_bank(to_integer(unsigned(write_addr))) &lt;= write_data;
            	end if;
            end if;
        end process register_access;

end Behavioral;</vhdl>
  <vhdl name="imm_gen">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity imm_gen is
    port(
        instr : in std_logic_vector(31 downto 0);
        imm : out std_logic_vector(31 downto 0)
    );
end imm_gen;

architecture Behavioral of imm_gen is
begin
    decode_instr : process(instr)
    begin
        -- logica para fazer decode da instrução
        case instr(6 downto 0) is
            when "0110111" =&gt; -- lui
                imm(31 downto 12) &lt;= instr(31 downto 12);
                imm(11 downto 0) &lt;= (others =&gt; '0');
            when "0010111" =&gt; -- auipc
                imm(31 downto 12) &lt;= instr(31 downto 12);
                imm(11 downto 0) &lt;= (others =&gt; '0');
            when "1101111" =&gt; -- jal
                imm(19 downto 0) &lt;= instr(31) &amp; instr(19 downto 12) &amp; instr(20) &amp; instr(30 downto 21);
                imm(31 downto 20) &lt;= (others =&gt; instr(31));
            when "1100111" =&gt; -- jalr
                imm(11 downto 0) &lt;= instr(31 downto 20);
                imm(31 downto 12) &lt;= (others =&gt; instr(31));
            when "1100011" =&gt; -- branch
                imm(11 downto 0) &lt;= instr(31) &amp; instr(7) &amp; instr(30 downto 25) &amp; instr(11 downto 8);
                imm(31 downto 12) &lt;= (others =&gt; instr(31));
            when "0000011" =&gt; -- load
                imm(11 downto 0) &lt;= instr(31 downto 20);
                imm(31 downto 12) &lt;= (others =&gt; instr(31));
            when "0100011" =&gt; -- store
                imm(11 downto 0) &lt;= instr(31 downto 25) &amp; instr(11 downto 7);
                imm(31 downto 12) &lt;= (others =&gt; instr(31));
            when "0010011" =&gt; -- i-type
                if (instr(13) or (not instr(12))) = '1' then -- andi, ori, xori, 
                    imm(11 downto 0) &lt;= instr(31 downto 20);
                    imm(31 downto 12) &lt;= (others =&gt; instr(31));
                else                               -- slli e srli
                    imm(4 downto 0) &lt;= instr(24 downto 20);
                    imm(31 downto 5) &lt;= (others =&gt; instr(31));
                end if;
            when others =&gt; -- outros
                imm &lt;= (others =&gt; 'X');
        end case;
    end process decode_instr;
end architecture;</vhdl>
  <vhdl name="ctrl_unit">library ieee;
use ieee.std_logic_1164.all;


entity ctrl_unit is
    port(
        instr : in std_logic_vector(31 downto 0);
        pc_reg : out std_logic; -- 0 -&gt; pc, 1 -&gt; reg1
        alu_op : out std_logic_vector(2 downto 0); -- alu opcode
        branch : out std_logic; -- 0 -&gt; não é branch e 1 -&gt; é branch
        mem_read : out std_logic; -- 0 -&gt; sem leitura, 1 -&gt; leitura
        mem_write : out std_logic; -- 0 -&gt; sem escrita, 1 -&gt; escrita
        mem_to_reg : out std_logic; -- 0 -&gt; alu, 1 -&gt; mem
        alu_src : out std_logic; -- 0 -&gt; reg, 1 -&gt; imediato
        reg_write : out std_logic; -- 0 -&gt; leitura , 1 -&gt; escrita
        pc_reg_branch : out std_logic -- 0 -&gt; pc, 1 -&gt; reg1 (mux de entrada do somador do branch)
    );
end ctrl_unit;

architecture Behavioral of ctrl_unit is
begin
    -- alu_op           operação
    --  000     nop
    --  001     logico-aritmética (R-type)
    --  010     logico-aritmética (I-type)
    --  011     branch (equal or not equal)
    --  100     adição in1 + in2
    --  101     adição in1 + 4
    --  110     passa o imediato (in2) direto pra saída
    --  111     nop

    ctrl_decode : process(instr)
    begin
        case instr(6 downto 0) is
            when "0110011" =&gt; -- instruções tipo R
                reg_write &lt;= '1'; -- escreve no reg
                mem_to_reg &lt;= '0'; -- passa alu
                mem_write &lt;= 'X';  -- não é mem
                mem_read &lt;= 'X'; 
                branch &lt;= '0'; -- sem branch
                alu_src &lt;= '0'; -- reg
                alu_op &lt;= "001"; -- (logico-aritmética)
                pc_reg &lt;= '0'; -- passa reg
                pc_reg_branch &lt;= '0'; -- passa pc
            when "0010011" =&gt; -- instruções tipo I
                reg_write &lt;= '1';
                mem_to_reg &lt;= '0'; -- passa alu
                mem_write &lt;= 'X';  -- não é mem
                mem_read &lt;= 'X'; 
                branch &lt;= '0'; -- sem branch
                alu_src &lt;= '1'; -- imediato
                alu_op &lt;= "010"; -- (logico-aritmética)
                pc_reg &lt;= '0'; -- passa reg
                pc_reg_branch &lt;= '0'; -- passa pc
            when "1100011" =&gt; -- instruções de branch
                reg_write &lt;= '0';
                mem_to_reg &lt;= 'X'; -- não escreve em reg
                mem_write &lt;= 'X';  -- não é mem
                mem_read &lt;= 'X';
                branch &lt;= '1'; -- branch
                alu_src &lt;= '0'; -- reg
                alu_op &lt;= "011"; -- (equal or not equal)
                pc_reg &lt;= '0'; -- passa reg
                pc_reg_branch &lt;= '0'; -- passa pc
            when "0010111" =&gt; -- auipc
                reg_write &lt;= '1';
                mem_to_reg &lt;= '0'; -- passa alu
                mem_write &lt;= 'X';  -- não é mem
                mem_read &lt;= 'X';
                branch &lt;= '0'; -- sem branch
                alu_src &lt;= '1'; -- imediato
                alu_op &lt;= "100"; -- (add)
                pc_reg &lt;= '1'; -- pc
                pc_reg_branch &lt;= '0'; -- passa pc
            when "0110111" =&gt; -- lui
                reg_write &lt;= '1';
                mem_to_reg &lt;= '0'; -- passa alu
                mem_write &lt;= 'X';  -- não é mem
                mem_read &lt;= 'X';
                branch &lt;= '0'; -- sem branch
                alu_src &lt;= '1'; -- imediato
                alu_op &lt;= "110"; -- (passa o imediato pra saída da ALU)
                pc_reg &lt;= 'X'; -- essa entrada não é processada nessa alu_op
                pc_reg_branch &lt;= '0'; -- passa pc
            when "0000011" =&gt; -- lw
                reg_write &lt;= '1';
                mem_to_reg &lt;= '1'; -- passa mem
                mem_write &lt;= '0';  -- le na memória
                mem_read &lt;= '1';
                branch &lt;= '0'; -- sem branch
                alu_src &lt;= '1'; -- imediato
                alu_op &lt;= "100"; -- (add)
                pc_reg &lt;= '0'; -- passa reg
                pc_reg_branch &lt;= '0'; -- passa pc
            when "0100011" =&gt; -- sw
                reg_write &lt;= '0';
                mem_to_reg &lt;= 'X'; -- não escreve em reg
                mem_write &lt;= '1';  -- escreve na memória
                mem_read &lt;= '0';
                branch &lt;= '0'; -- sem branch
                alu_src &lt;= '1'; -- imediato
                alu_op &lt;= "100"; -- (add)
                pc_reg &lt;= '0'; -- passa reg
                pc_reg_branch &lt;= '0'; -- passa pc
            when "1101111" =&gt; -- jal
                reg_write &lt;= '1';
                mem_to_reg &lt;= '0'; -- passa alu
                mem_write &lt;= 'X';  -- não é mem
                mem_read &lt;= 'X';
                branch &lt;= '1'; -- branch
                alu_src &lt;= '1'; -- imediato
                alu_op &lt;= "101"; --(add + 4)
                pc_reg &lt;= '1'; -- passa pc
                pc_reg_branch &lt;= '0'; -- passa pc
            when "1100111" =&gt; -- jalr
                reg_write &lt;= '1';
                mem_to_reg &lt;= '0'; -- passa alu
                mem_write &lt;= 'X';  -- não é mem
                mem_read &lt;= 'X';
                branch &lt;= '1'; -- branch
                alu_src &lt;= '1'; -- imediato
                alu_op &lt;= "101"; --(add + 4)
                pc_reg &lt;= '1'; -- passa pc
                pc_reg_branch &lt;= '1'; -- passa reg1
            when others =&gt;
                reg_write &lt;= 'X';
                mem_to_reg &lt;= 'X';
                mem_write &lt;= 'X'; 
                mem_read &lt;= 'X';
                branch &lt;= 'X'; 
                alu_src &lt;= 'X'; 
                alu_op &lt;= "XXX";
                pc_reg &lt;= 'X'; 
                pc_reg_branch &lt;= 'X';
        end case;
    end process ctrl_decode;
end architecture;</vhdl>
  <vhdl name="alu">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity alu is
    port(
        in_a, in_b : in std_logic_vector(31 downto 0);
        op : in std_logic_vector(3 downto 0);
        out_r : out std_logic_vector(31 downto 0);
        aux_br : out std_logic
    );
end alu;

-- Operação  OPCODE  Br_aux
-- nop        0000     0
-- Soma       0001     0 
-- Sub        0010     0
-- and        0011     0
-- or         0100     0
-- xor        0101     0
-- sll        0110     0
-- srl        0111     0
-- equal      1000     1 if equal
-- ~equal     1001     1 if not equal
-- in1 + 1    1010     1
-- out = in2  1011     0
-- nop        others   0
architecture Behavioral of alu is
    begin

    process(in_a, in_b, op)
    begin
        case op is
            when "0001" =&gt; 
                out_r &lt;= std_logic_vector(signed(in_a) + signed(in_b));
                aux_br &lt;= '0';
            when "0010" =&gt; 
                out_r &lt;= std_logic_vector(signed(in_a) - signed(in_b));
                aux_br &lt;= '0';
            when "0011" =&gt; 
                out_r &lt;= in_a and in_b;
                aux_br &lt;= '0';
            when "0100" =&gt;
                out_r &lt;= in_a or in_b;
            when "0101" =&gt; 
                out_r &lt;= in_a xor in_b;
                aux_br &lt;= '0';
            when "0110" =&gt; 
                out_r &lt;= std_logic_vector(shift_left(unsigned(in_a), to_integer(unsigned(in_b(4 downto 0)))));
                aux_br &lt;= '0';
            when "0111" =&gt; 
                out_r &lt;= std_logic_vector(shift_right(unsigned(in_a), to_integer(unsigned(in_b(4 downto 0)))));
                aux_br &lt;= '0';
            when "1000" =&gt; 
                out_r &lt;= (others =&gt; 'X');
                if in_a = in_b then
                	aux_br &lt;= '1';
                else aux_br &lt;= '0';
                end if;
            when "1001" =&gt; 
                out_r &lt;= (others =&gt; 'X');
                if in_a /= in_b then
                	aux_br &lt;= '1';
                else aux_br &lt;= '0';
                end if;
            when "1010" =&gt; 
                out_r &lt;= std_logic_vector(unsigned(in_a) + 1);
                aux_br &lt;= '1';
            when "1011" =&gt; 
                out_r &lt;= in_b;
                aux_br &lt;= '0';
            when others =&gt; 
                out_r &lt;= in_a;
                aux_br &lt;= '0';
        end case;
    end process;
end Behavioral;</vhdl>
  <vhdl name="alu_ctrl">library ieee;
use ieee.std_logic_1164.all;

entity alu_ctrl is
    port(
        alu_op: in std_logic_vector(2 downto 0);
        instruction: in std_logic_vector(31 downto 0);
        opcode: out std_logic_vector(3 downto 0)
    );
end alu_ctrl;

-- Operação  OPCODE  Br_aux
-- nop        0000     0
-- Soma       0001     0 
-- Sub        0010     0
-- and        0011     0
-- or         0100     0
-- xor        0101     0
-- sll        0110     0
-- srl        0111     0
-- equal      1000     1 if equal
-- ~equal     1001     1 if not equal
-- in1 + 1    1010     1
-- out = in2  1011     0
-- nop        others   0

architecture Behavioral of alu_ctrl is
    signal funct3 : std_logic_vector(2 downto 0) := (others =&gt; '0');
    signal funct7 : std_logic_vector(6 downto 0) := (others =&gt; '0');

begin

    funct3 &lt;= instruction(14 downto 12);
    funct7 &lt;= instruction(31 downto 25);

    op_decode: process(alu_op, funct3, funct7) is
        begin
            if alu_op = "001" or alu_op = "010" then
                if funct3 = "000" and alu_op = "001" then
	                if funct7 = "0000000" then -- add
	                    opcode &lt;= "0001";
	                elsif funct7 = "0100000" then -- sub
	                    opcode &lt;= "0010";
	                end if;
	           elsif funct3 = "000" and alu_op = "010" then
	           	opcode &lt;= "0001";
	           elsif funct3 = "001" then -- sll
	                opcode &lt;= "0110";
	           elsif funct3 = "100" then -- xor
	                opcode &lt;= "0101";
	           elsif funct3 = "101" then -- srl
	                opcode &lt;= "0111";
	           elsif funct3 = "110" then -- or
	                opcode &lt;= "0100";
	           elsif funct3 = "111" then -- and
	                opcode &lt;= "0011";
	           end if;
            elsif alu_op = "011" then
                if funct3 = "000" then -- beq
                    opcode &lt;= "1000";
                elsif funct3 = "001" then -- bne
                    opcode &lt;= "1001";
                end if;
            elsif alu_op = "100" then
                opcode &lt;= "0001";
            elsif alu_op = "101" then
                opcode &lt;= "1010";
            elsif alu_op = "110" then
                opcode &lt;= "1011";
            elsif alu_op = "111" or alu_op = "000" then
                opcode &lt;= "0000";
            end if;
    end process op_decode;

end Behavioral;</vhdl>
  <vhdl name="IF_ID">library ieee;
use ieee.std_logic_1164.all;

entity IF_ID is
    port(
        clk : in std_logic;
        instr_in: in std_logic_vector(31 downto 0);
        pc_in : in std_logic_vector(31 downto 0);

        instr_out: out std_logic_vector(31 downto 0);
        pc_out : out std_logic_vector(31 downto 0)
    );
end IF_ID;

architecture Behavioral of IF_ID is
    begin
        process(clk)
        begin
            if rising_edge(clk) then
                instr_out &lt;= instr_in;
                pc_out &lt;= pc_in;
            end if;
        end process;
end Behavioral;</vhdl>
  <vhdl name="ID_EX">library ieee;
use ieee.std_logic_1164.all;

entity ID_EX is
    port(
        clk : in std_logic;
        -- data
        instr_in: in std_logic_vector(31 downto 0);
        pc_in : in std_logic_vector(31 downto 0);

        instr_out: out std_logic_vector(31 downto 0);
        pc_out : out std_logic_vector(31 downto 0);

        reg_a_out : out std_logic_vector(31 downto 0);
        reg_b_out : out std_logic_vector(31 downto 0);
        reg_a_in : in std_logic_vector(31 downto 0);
        reg_b_in : in std_logic_vector(31 downto 0);

        imm_in : in std_logic_vector(31 downto 0);
        imm_out : out std_logic_vector(31 downto 0);

        -- control
        -- EX
        pc_reg_alu_in : in std_logic;
        pc_reg_alu_out : out std_logic;
        alu_src_in : in std_logic;
        alu_src_out : out std_logic;
        alu_op_in : in std_logic_vector(2 downto 0);
        alu_op_out : out std_logic_vector(2 downto 0);

        -- MEM
        mem_w_in : in std_logic;
        mem_w_out : out std_logic;
        mem_r_in : in std_logic;
        mem_r_out : out std_logic;
        branch_in : in std_logic;
        branch_out : out std_logic;
        pc_reg_br_in : in std_logic;
        pc_reg_br_out : out std_logic;

        -- WB
        mem_to_reg_in : in std_logic;
        mem_to_reg_out : out std_logic;
        reg_w_in : in std_logic;
        reg_w_out : out std_logic
    );
end ID_EX;

architecture Behavioral of ID_EX is
    begin
        process(clk)
        begin
            if rising_edge(clk) then
                instr_out &lt;= instr_in;
                pc_out &lt;= pc_in;

                reg_a_out &lt;= reg_a_in;
                reg_b_out &lt;= reg_b_in;
                imm_out &lt;= imm_in;

                pc_reg_alu_out &lt;= pc_reg_alu_in;
                alu_src_out &lt;= alu_src_in;
                alu_op_out &lt;= alu_op_in;
                mem_w_out &lt;= mem_w_in;
                mem_r_out &lt;= mem_r_in;
                branch_out &lt;= branch_in;
                pc_reg_br_out &lt;= pc_reg_br_in;
                mem_to_reg_out &lt;= mem_to_reg_in;
                reg_w_out &lt;= reg_w_in;
            end if;
        end process;
end Behavioral;</vhdl>
  <vhdl name="EX_MEM">library ieee;
use ieee.std_logic_1164.all;

entity EX_MEM is
    port(
        clk : in std_logic;
        
        alu_result_in : in std_logic_vector(31 downto 0);
        branch_alu_in : in std_logic;
        reg_a_in : in std_logic_vector(31 downto 0);
        reg_b_in : in std_logic_vector(31 downto 0);
        imm_in : in std_logic_vector(31 downto 0);
        wb_addr_in : in std_logic_vector(4 downto 0);
        pc_in : in std_logic_vector(31 downto 0);

        imm_out : out std_logic_vector(31 downto 0);
        reg_a_out : out std_logic_vector(31 downto 0);
        reg_b_out : out std_logic_vector(31 downto 0);
        alu_result_out : out std_logic_vector(31 downto 0);
        branch_alu_out : out std_logic;
        wb_addr_out : out std_logic_vector(4 downto 0);
        pc_out : out std_logic_vector(31 downto 0);

        -- control
        -- MEM
        mem_w_in : in std_logic;
        mem_w_out : out std_logic;
        mem_r_in : in std_logic;
        mem_r_out : out std_logic;
        branch_in : in std_logic;
        branch_out : out std_logic;
        pc_reg_br_in : in std_logic;
        pc_reg_br_out : out std_logic;

        -- WB
        mem_to_reg_in : in std_logic;
        mem_to_reg_out : out std_logic;
        reg_w_in : in std_logic;
        reg_w_out : out std_logic
    );
end EX_MEM;

architecture Behavioral of EX_MEM is
    begin
        process(clk)
        begin
            if rising_edge(clk) then
                imm_out &lt;= imm_in;
                reg_a_out &lt;= reg_a_in;
                reg_b_out &lt;= reg_b_in;
                alu_result_out &lt;= alu_result_in;
                branch_alu_out &lt;= branch_alu_in;
                wb_addr_out &lt;= wb_addr_in;
                pc_out &lt;= pc_in;

                mem_w_out &lt;= mem_w_in;
                mem_r_out &lt;= mem_r_in;
                branch_out &lt;= branch_in;
                pc_reg_br_out &lt;= pc_reg_br_in;
                mem_to_reg_out &lt;= mem_to_reg_in;
                reg_w_out &lt;= reg_w_in;
            end if;
        end process;
end Behavioral;</vhdl>
  <vhdl name="MEM_WB">library ieee;
use ieee.std_logic_1164.all;

entity MEM_WB is
    port(
        clk : in std_logic;
        
        alu_result_in : in std_logic_vector(31 downto 0);
        mem_in : in std_logic_vector(31 downto 0);
        wb_addr_in : in std_logic_vector(4 downto 0);

        alu_result_out : out std_logic_vector(31 downto 0);
        mem_out : out std_logic_vector(31 downto 0);

        wb_addr_out : out std_logic_vector(4 downto 0);

        -- control
        -- WB
        mem_to_reg_in : in std_logic;
        mem_to_reg_out : out std_logic;
        reg_w_in : in std_logic;
        reg_w_out : out std_logic
    );
end MEM_WB;

architecture Behavioral of MEM_WB is
    begin
        process(clk)
        begin
            if rising_edge(clk) then
                alu_result_out &lt;= alu_result_in;
                mem_out &lt;= mem_in;
                wb_addr_out &lt;= wb_addr_in;

                mem_to_reg_out &lt;= mem_to_reg_in;
                reg_w_out &lt;= reg_w_in;
            end if;
        end process;
end Behavioral;</vhdl>
  <vhdl name="fwd_unit">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity fwd_unit is
    port(
        reg_s1 : in std_logic_vector(4 downto 0);
        reg_s2 : in std_logic_vector(4 downto 0);
        reg_dst : in std_logic_vector(4 downto 0);

        mem_wb_reg_dst : in std_logic_vector(4 downto 0);
        ex_mem_reg_dst : in std_logic_vector(4 downto 0);

        -- flags control ex/mem e mem/wb
        ex_mem_reg_w : in std_logic;
        mem_wb_reg_w : in std_logic;

        forward_a : out std_logic_vector(1 downto 0);
        forward_b : out std_logic_vector(1 downto 0)
    );
end fwd_unit;

architecture Behavioral of fwd_unit is
    begin
        forward_decode : process(reg_s1, reg_s2, reg_dst, mem_wb_reg_dst, ex_mem_reg_dst, ex_mem_reg_w, mem_wb_reg_w) is
            begin
                if ex_mem_reg_w = '1' and (ex_mem_reg_dst /= "00000") then
                    if ex_mem_reg_dst = reg_s1 then
                        forward_a &lt;= "10";
                    else forward_a &lt;= "00";
                    end if;
                    if ex_mem_reg_dst = reg_s2 then
                        forward_b &lt;= "10";
                    else forward_b &lt;= "00";
                    end if;
                elsif mem_wb_reg_w = '1' and (mem_wb_reg_dst /= "00000") then
                    if (mem_wb_reg_dst = reg_s1) and (ex_mem_reg_dst = reg_s1) then
                        forward_a &lt;= "01";
                    else forward_a &lt;= "00";
                    end if;
                    if (mem_wb_reg_dst = reg_s2) and (ex_mem_reg_dst = reg_s2) then
                        forward_b &lt;= "01";
                    else forward_b &lt;= "00";
                    end if;
                else
                    forward_a &lt;= "00";
                    forward_b &lt;= "00";
                end if;
        end process forward_decode;
end Behavioral;</vhdl>
</project>
